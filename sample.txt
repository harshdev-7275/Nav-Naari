import axios from "axios";
import React, {
  Dispatch,
  SetStateAction,
  useState,
  ChangeEvent,
  FormEvent,
} from "react";

import { FaUpload, FaTimes } from "react-icons/fa";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

interface PostModalProps {
  setIsPostModalOn: Dispatch<SetStateAction<boolean>>;
  id: string | null | undefined;
}

const PostModal = ({ setIsPostModalOn, id }: PostModalProps) => {
  const [image, setImage] = useState("");
  const [isImageUploading, setImageUploading] = useState(false);
  const [content, setContent] = useState("");

  const handleProfileInputChange = async (
    event: ChangeEvent<HTMLInputElement>
  ) => {
    const uploadedFile = event.target.files && event.target.files[0];
    if (uploadedFile) {
      setImageUploading(true);
      const data = new FormData();
      data.append("file", uploadedFile);
      data.append("upload_preset", "campuse-connect");
      data.append("cloud_name", "dn8vqsuvc");
      try {
        const response = await fetch(
          "https://api.cloudinary.com/v1_1/dn8vqsuvc/image/upload",
          {
            method: "POST",
            body: data,
          }
        );
        const fileData = await response.json();
        setImage(fileData.url);
        setImageUploading(false);
      } catch (error) {
        console.error("Error uploading image:", error);
        setImageUploading(false);
        toast.error("Internal Server Error!");
      }
    }
  };

  const handleCloseModal = () => {
    setIsPostModalOn(false);
  };

  const handlePostSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    try {
      const res = await axios.post(
        `http://localhost:5000/api/user/post/createPost?id=${id}`,
        {
          content,
          image,
        },
        {
          withCredentials: true,
        }
      );
      await axios.patch(
        `http://localhost:5000/api/user/profile/updateUserProfile?id=${id}`,
        {
          posts: [res.data.data._id],
        },
        {
          withCredentials: true,
        }
      );
      console.log(res.data.data._id);

      // Handle successful response
      toast.success("Post uploaded successfully!");
      handleCloseModal(); // Close the modal after successful upload
    } catch (error) {
      console.error("Error uploading post:", error);
      toast.error("Failed to upload post. Please try again later.");
    }
  };

  return (
    <div className="fixed inset-0 overflow-hidden bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="relative bg-white w-[400px] rounded-lg">
        <div className="absolute top-0 right-0 mt-2 mr-2 text-black">
          <button onClick={handleCloseModal}>
            <FaTimes size={22} />
          </button>
        </div>
        <form
          onSubmit={handlePostSubmit}
          className="p-5 text-black flex flex-col items-center w-full gap-4"
        >
          <h1 className="text-xl font-semibold">Upload New Post</h1>
          <p>Attach an Image</p>
          <div className="mt-3 border-dashed border-2 border-gray-300 h-32 flex flex-col items-center justify-center">
            <input
              type="file"
              accept="image/*"
              className=""
              onChange={handleProfileInputChange}
            />
            <FaUpload size={32} />
          </div>
          <div className="mt-10">
            <input
              type="text"
              className="text-black outline-none border-b-2 border-black w-[300px]"
              placeholder="Enter your caption"
              value={content}
              onChange={(e) => setContent(e.target.value)}
              autoFocus
            />
          </div>
          <div className="bg-black text-white px-9 py-2 rounded-md shadow-lg shadow-black ">
            <button type="submit">
              {isImageUploading ? "Uploading..." : "Upload"}
            </button>
          </div>
        </form>
      </div>
      <ToastContainer />
    </div>
  );
};

export default PostModal;
